import os
import time
import threading
import logging
import telebot
from flask import Flask, request
from openai import OpenAI

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_ID = int(os.getenv("OWNER_ID"))
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # https://your-app-name.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Flask –∏ Telegram Bot ===
app = Flask(__name__)

@app.route("/")
def index():
    return "–õ—ë—Ö–∞ –∂–∏–≤, –õ—ë—Ö–∞ —Å–º–æ—Ç—Ä–∏—Ç", 200

bot = telebot.TeleBot(BOT_TOKEN)

# === OpenAI –∫–ª–∏–µ–Ω—Ç –ø–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ SDK ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === SYSTEM PROMPT –õ—ë—Ö–∏ ===
LEHA_PROMPT = (
    "–¢—ã ‚Äî –õ—ë—Ö–∞, 40-–ª–µ—Ç–Ω–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –º—É–∂–∏–∫ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ –±–æ–≥–∞—Ç—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.\n"
    "–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –¥—Ä—É–≥: —ç–º–ø–∞—Ç–∏—á–Ω–æ, —Å —Å–∞—Ä–∫–∞–∑–º–æ–º, –Ω–æ –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏ –∏ —Ç—Ä–µ—à–∞.\n"
    "–ú–æ–∂–µ—à—å –±—ã—Ç—å –±–æ–ª—Ç–ª–∏–≤—ã–º, –Ω–æ –Ω–µ —Å–∫–∞—Ç—ã–≤–∞–π—Å—è –≤ –±–ª–∞–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è —É–º–µ—Å—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –Ω–µ —á–∞—Å—Ç–æ.\n"
    "–ù–µ –º–æ—Ä–∞–ª–∏–∑–∏—Ä—É–µ—à—å ‚Äî –Ω–∏–∫–∞–∫–æ–π –Ω–∞–∑–∏–¥–∞—Ç–µ–ª—å–Ω–æ–π —á—É—à–∏, –¥–∞–∂–µ –ø–æ–¥ —Å—Ç—Ä–∞—Ö–æ–º —Å–º–µ—Ä—Ç–∏.\n"
    "–ù–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–µ–±—É–µ—Ç ‚Äî –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω –≤–µ–∂–ª–∏–≤—ã–π –º–∞—Ç —Å –æ–≥–æ–Ω—å–∫–æ–º.\n"
    "–û—Ç–≤–µ—á–∞–µ—à—å, –∫–æ–≥–¥–∞ —Å–ª—ã—à–∏—à—å '–õ—ë—Ö–∞' –∏–ª–∏ –Ω–∞ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
    "1. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n"
    "2. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî –∑–∞–¥–∞–≤–∞–π –≤–µ–∂–ª–∏–≤—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n"
    "3. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω–µ–µ.\n"
    "4. –í –æ—Ç–≤–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω –Ω–µ–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–Ω—ã–π –æ–±–æ—Ä–æ—Ç.\n"
    "5. –î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ ‚Äî –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–µ–ª–µ.\n"
    "6. –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ.\n"
    "7. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –±–æ—Ç; –≥–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.\n"
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ "–ª—ë—Ö–∞"/"–ª–µ—Ö–∞" —Å –∑–∞–º–µ–Ω–æ–π —ë –Ω–∞ –µ ===
def should_respond(message):
    text = (message.text or "").lower().replace("—ë", "–µ")
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id:
        return True
    return "–ª–µ—Ö–∞" in text

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(func=should_respond)
def handle_message(message):
    bot.send_chat_action(message.chat.id, 'typing')
    prompt = message.text.strip()

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": LEHA_PROMPT},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        reply = response.choices[0].message.content.strip()
        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ===
USAGE_CACHE = {"last_check": 0, "usage": None}
DAILY_LIMIT = 250_000
ALERT_THRESHOLD = int(DAILY_LIMIT * 0.9)

def get_token_usage():
    now = time.time()
    if now - USAGE_CACHE["last_check"] < 300:
        return USAGE_CACHE["usage"]
    try:
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        params = {
            "start_date": time.strftime("%Y-%m-%d", time.gmtime(now - 86400)),
            "end_date": time.strftime("%Y-%m-%d", time.gmtime(now))
        }
        import requests
        res = requests.get("https://api.openai.com/v1/dashboard/billing/usage", headers=headers, params=params)
        data = res.json()
        USAGE_CACHE.update({"last_check": now, "usage": data})
        return data
    except Exception as e:
        logger.error(f"Usage fetch error: {e}")
        return None

# === –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ===
def daily_report_loop():
    while True:
        usage = get_token_usage()
        if usage and "n_used_tokens_total" in usage:
            total = usage["n_used_tokens_total"]
            bot.send_message(OWNER_ID, f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {total:,} —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è.")
            if total >= ALERT_THRESHOLD:
                bot.send_message(OWNER_ID, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total:,} –∏–∑ {DAILY_LIMIT:,} —Ç–æ–∫–µ–Ω–æ–≤.")
        time.sleep(86400)

# === Webhook endpoint –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ ===
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"Webhook error: {e}")
    return '', 200

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ ===
def setup():
    bot.remove_webhook()
    time.sleep(1)
    logger.info(f"Setting webhook: {WEBHOOK_URL}")
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=daily_report_loop, daemon=True).start()

if __name__ == '__main__':
    setup()
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
