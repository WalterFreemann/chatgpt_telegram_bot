import os
import time
import datetime
import telebot
import openai
from flask import Flask, request

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ADMIN_CHAT_ID = 258535298
DAILY_TOKEN_LIMIT = 250_000
ALERT_THRESHOLD = int(DAILY_TOKEN_LIMIT * 0.9)

bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

app = Flask(__name__)
last_report_date = None

def check_token_usage():
    global last_report_date
    try:
        usage = openai.APIUsage.retrieve()
        total = usage['daily_token_usage']['total_tokens']

        # –¢—Ä–µ–≤–æ–≥–∞ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
        if total > ALERT_THRESHOLD:
            bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ü–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç: {total:,} –∏–∑ {DAILY_TOKEN_LIMIT:,} —Ç–æ–∫–µ–Ω–æ–≤.")

        # –û—Ç—á—ë—Ç —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        today = datetime.date.today()
        if last_report_date != today:
            last_report_date = today
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total:,} –∏–∑ {DAILY_TOKEN_LIMIT:,}"
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å usage: {e}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –∑–æ–≤—É—Ç –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞—é—Ç
        if (message.text and '–ª—ë—Ö–∞' in message.text.lower()) or message.reply_to_message and message.reply_to_message.from_user.username == bot.get_me().username:
            bot.send_chat_action(message.chat.id, 'typing')

            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini-2024-07-18",
                messages=[
                    {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –º—É–∂–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –õ—ë—Ö–∞. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, —Å —é–º–æ—Ä–æ–º, –Ω–æ –Ω–µ –∫–∞–∫ –ø–∞—Ü–∞–Ω, –∞ –∫–∞–∫ –≤–∑—Ä–æ—Å–ª—ã–π –º—É–∂–∏–∫ —Å –æ–ø—ã—Ç–æ–º."},
                    {"role": "user", "content": message.text},
                ]
            )
            bot.send_message(message.chat.id, response.choices[0].message.content)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç—á—ë—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        check_token_usage()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_message: {e}")

@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return 'ok', 200

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

if __name__ == '__main__':
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=f"https://chatgpt-telegram-bot-662g.onrender.com/{BOT_TOKEN}")
