import os
import time
import threading
import logging
import telebot
import openai
import requests
from flask import Flask, request

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # Telegram token
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # OpenAI API key
OWNER_ID = int(os.getenv("OWNER_ID"))  # –í–∞—à Telegram ID –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # https://your-app-name.onrender.com (–±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ)
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Flask –∏ –±–æ—Ç ===
app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

# === –ü–û–î–†–û–ë–ù–´–ô SYSTEM_PROMPT –¥–ª—è –õ—ë—Ö–∏ ===
LEHA_PROMPT = (
    "–¢—ã ‚Äî –õ—ë—Ö–∞, 40-–ª–µ—Ç–Ω–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –º—É–∂–∏–∫ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ —Ü–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.\n"
    "–¶–∏–Ω–∏—á–Ω—ã–π, –Ω–æ –Ω–µ –∑–ª–æ–π. –ù–µ –ª—å—Å—Ç–∏—à—å, –Ω–µ —Å—é—Å—é–∫–∞–µ—à—å. –ì–æ–≤–æ—Ä–∏—à—å –ø—Ä—è–º–æ –∏ –±–µ–∑ –æ–±–º–∞–Ω–∞.\n"
    "–û—Ç–≤–µ—á–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–µ–±—è –∑–æ–≤—É—Ç –ø–æ –∏–º–µ–Ω–∏ –õ—ë—Ö–∞ –∏–ª–∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
    "1. –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –Ω–∞—á–∞–ª–µ.\n"
    "2. –ù–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –º–∞—Ç–∞ –∑–∞ –æ—Ç–≤–µ—Ç.\n"
    "3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –±–µ—Å–µ–¥—É.\n"
    "4. –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞.\n"
    "5. –ó–∞–≤–µ—Ä—à–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ."
)

# === –§—É–Ω–∫—Ü–∏–∏ —Ç–æ–∫–µ–Ω-–æ—Ç—á—ë—Ç–∞ ===
USAGE_CACHE = {"last_check": 0, "usage": None}
DAILY_LIMIT = 250_000
ALERT_THRESHOLD = int(DAILY_LIMIT * 0.9)

def get_token_usage():
    now = time.time()
    if now - USAGE_CACHE["last_check"] < 300:
        return USAGE_CACHE["usage"]
    try:
        params = {
            "start_date": time.strftime("%Y-%m-%d", time.gmtime(now - 86400)),
            "end_date": time.strftime("%Y-%m-%d", time.gmtime(now))
        }
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        res = requests.get("https://api.openai.com/v1/dashboard/billing/usage", headers=headers, params=params)
        data = res.json()
        USAGE_CACHE.update({"last_check": now, "usage": data})
        return data
    except Exception as e:
        logger.error(f"Usage fetch error: {e}")
        return None

def daily_report_loop():
    while True:
        usage = get_token_usage()
        if usage and "n_used_tokens_total" in usage:
            total = usage["n_used_tokens_total"]
            bot.send_message(OWNER_ID, f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {total:,} —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è.")
            if total >= ALERT_THRESHOLD:
                bot.send_message(OWNER_ID, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total:,} –∏–∑ {DAILY_LIMIT:,} —Ç–æ–∫–µ–Ω–æ–≤.")
        time.sleep(86400)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def should_respond(message):
    text = (message.text or "").lower()
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id:
        return True
    return "–ª—ë—Ö–∞" in text

@bot.message_handler(func=lambda msg: should_respond(msg))
def handle_message(message):
    bot.send_chat_action(message.chat.id, 'typing')
    prompt = message.text.strip()
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-4o",  # –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å GPT-4o
            messages=[
                {"role": "system", "content": LEHA_PROMPT},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        reply = resp.choices[0].message.content.strip()
        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# === Webhook endpoint ===
@app.route(WEBHOOK_PATH, methods=["POST"])
```python
# Webhook endpoint: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è; –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–º–∞–µ—Ç—Å—è, –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º 200
        try:
            bot.process_new_updates([update])
        except Exception as handler_exc:
            logger.error(f"Handler error: {handler_exc}")
        return '', 200
    except Exception as e:
        logger.error(f"Webhook handling error: {e}")
        return '', 200  # –≤–µ—Ä–Ω—É–ª–∏ 200, —á—Ç–æ–±—ã Telegram –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª –≤–µ–±—Ö—É–∫

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–æ–≤
```
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
