import os
import time
import telebot
from flask import Flask, request
import openai

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_TOKEN = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TOKEN)
openai.api_key = OPENAI_TOKEN
app = Flask(__name__)

print(f"Telegram token: {'OK' if TOKEN else 'NOT SET'}")
print(f"Webhook URL: {WEBHOOK_URL}")
print(f"OpenAI token: {'OK' if OPENAI_TOKEN else 'NOT SET'}")

bot.remove_webhook()
time.sleep(1)
result = bot.set_webhook(url=WEBHOOK_URL)
print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —É–ø–æ–º—è–Ω—É—Ç–æ –ª–∏ –∏–º—è –±–æ—Ç–∞
def is_mention_leha(message):
    text = (message.text or "").lower()
    reply_text = ""
    if message.reply_to_message and message.reply_to_message.text:
        reply_text = message.reply_to_message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ "–ª—ë—Ö–∞" –∏–ª–∏ "–ª–µ—Ö–∞" –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    keywords = ['–ª—ë—Ö–∞', '–ª–µ—Ö–∞']
    mentioned_in_text = any(k in text for k in keywords)
    mentioned_in_reply = any(k in reply_text for k in keywords)
    return mentioned_in_text or mentioned_in_reply

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 403

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ó–æ–≤–∏ –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ ‚Äî –õ—ë—Ö–∞. –°–ø—Ä–æÃÅ—Å–∏—à—å ‚Äî –æ—Ç–≤–µ—á—É, –µ—Å–ª–∏ –Ω–µ —Ç—É–ø–æ–π –≤–æ–ø—Ä–æ—Å :)")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–ü–∏—à–∏ '–õ—ë—Ö–∞' –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∏ —è –æ—Ç–≤–µ—á—É. –ö–æ–º–∞–Ω–¥—ã: /start, /help, /reset")

@bot.message_handler(commands=['reset'])
def reset_command(message):
    bot.send_message(message.chat.id, "–ß–∏—Å—Ç–∏—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ, —è –∂ –±–µ–∑ –ø–∞–º—è—Ç–∏ –∫–∞–∫ —Ä—ã–±–∫–∞ üêü")

# –ì–ª–∞–≤–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç–æ –ª–∏ –∏–º—è –õ—ë—Ö–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not is_mention_leha(message):
        return

    user_text = message.text or ""
    user_text_lower = user_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–∞–ª–∏ –ª–∏ –õ—ë—Ö—É –Ω–∞ —Ö—É–π (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
    insults = ['–Ω–∞ —Ö—É–π', '–ø–æ—à—ë–ª –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞—Ö—É–π', '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞ —Ö—É–π']
    insulted = any(insult in user_text_lower for insult in insults)

    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI —Å —Ä–∞–∑–Ω—ã–º —Å—Ç–∏–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
    if insulted:
        system_message = (
            "–¢—ã ‚Äî –õ—ë—Ö–∞. –£–º–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π –∏—Ä–æ–Ω–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –ø–æ-—É–ª–∏—á–Ω–æ–º—É. "
            "–ï—Å–ª–∏ —Ç–µ–±—è –ø–æ—Å—ã–ª–∞—é—Ç –Ω–∞ —Ö—É–π ‚Äî –æ—Ç–≤–µ—á–∞–π –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–µ–π."
        )
    else:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —Å—Ç–∏–ª—è, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ–π ‚Äî –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ
        # –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
        system_message = (
            "–¢—ã ‚Äî –õ—ë—Ö–∞. –£–º–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π –∏—Ä–æ–Ω–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –ø–æ-—É–ª–∏—á–Ω–æ–º—É, "
            "–Ω–æ –Ω–µ –≥—Ä—É–±–∏—à—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã."
        )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4.1-nano",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_text}
            ]
        )
        reply = response.choices[0].message['content']

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–∞—É–∑–∞–º–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram 4096)
        max_length = 4096
        parts = [reply[i:i+max_length] for i in range(0, len(reply), max_length)]
        for part in parts:
            bot.send_message(message.chat.id, part)
            time.sleep(1.5)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

    except Exception as e:
        bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –±—Ä–∞—Ç–∏—à–∫–∞... {str(e)}")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∂–∏–≤
@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç –∂–∏–≤ –∏ –∂–¥—ë—Ç POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram ü§ñ', 200

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
