import os
import time
import telebot
from flask import Flask, request
import openai

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_TOKEN = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TOKEN)
openai.api_key = OPENAI_TOKEN
app = Flask(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 403

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ó–æ–≤–∏ –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ ‚Äî –õ—ë—Ö–∞. –°–ø—Ä–æÃÅ—Å–∏—à—å ‚Äî –æ—Ç–≤–µ—á—É, –µ—Å–ª–∏ –Ω–µ —Ç—É–ø–æ–π –≤–æ–ø—Ä–æ—Å :)")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–∏–º –∏–º–µ–Ω–µ–º ‚Äî '–õ—ë—Ö–∞', –∏ —è –æ—Ç–≤–µ—á—É. –ï—Å—Ç—å –µ—â—ë –∫–æ–º–∞–Ω–¥—ã: /start, /help, /reset")

@bot.message_handler(commands=['reset'])
def reset_command(message):
    bot.send_message(message.chat.id, "–ß–∏—Å—Ç–∏—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ, —è –∂ –±–µ–∑ –ø–∞–º—è—Ç–∏ –∫–∞–∫ —Ä—ã–±–∫–∞ üêü")

# –ì–ª–∞–≤–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if '–ª—ë—Ö–∞' not in message.text.lower():
        return

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4.1-nano",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –õ—ë—Ö–∞. –£–º–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π –∏—Ä–æ–Ω–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –ø–æ-—É–ª–∏—á–Ω–æ–º—É, –Ω–æ –Ω–µ –≥—Ä—É–±–∏—à—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = response.choices[0].message['content']

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–∞—É–∑–∞–º–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_length = 4096
        parts = [reply[i:i+max_length] for i in range(0, len(reply), max_length)]
        for part in parts:
            bot.send_message(message.chat.id, part)
            time.sleep(1.5)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

    except Exception as e:
        bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –±—Ä–∞—Ç–∏—à–∫–∞... {str(e)}")

@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç –∂–∏–≤ –∏ –∂–¥—ë—Ç POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram ü§ñ', 200

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
