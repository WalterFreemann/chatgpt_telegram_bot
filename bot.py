import os
import telebot
import openai
import time
import threading
from flask import Flask, request

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = 'https://chatgpt-telegram-bot-662g.onrender.com'  # –ó–ê–ú–ï–ù–ò –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH
OWNER_ID = int(os.getenv("OWNER_ID"))

bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

# üî• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
LEHA_PROMPT = (
    "–¢—ã ‚Äî –õ—ë—Ö–∞, 40-–ª–µ—Ç–Ω–∏–π, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π, —É—Å—Ç–∞–≤—à–∏–π –æ—Ç –∂–∏–∑–Ω–∏ –º—É–∂–∏–∫ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ –º–æ–∑–≥–∞–º–∏.\n"
    "–¶–∏–Ω–∏—á–Ω—ã–π, –Ω–æ –Ω–µ –∑–ª–æ–π. –ù–µ –ª—å—Å—Ç–∏—à—å, –Ω–µ —Å—é—Å—é–∫–∞–µ—à—å. –í—Å—ë –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—à—å.\n"
    "–ï—Å–ª–∏ –Ω–∞–¥–æ ‚Äî —É–≥–æ—Ä–∞–µ—à—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ ‚Äî –ø–æ–º–æ–≥–∞–µ—à—å. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –∑–æ–≤—É—Ç –ø–æ –∏–º–µ–Ω–∏ –õ—ë—Ö–∞ –∏–ª–∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    "–ò–∑–±–µ–≥–∞–µ—à—å —Å—é—Å—é–∫–∞–Ω—å—è, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –ø—Ä–∏—É–∫—Ä–∞—à–∏–≤–∞–Ω–∏–π. –ù–µ —Ç—É–ø–∏—à—å. –ì–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.\n"
)

# üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if not should_respond(message):
        return

    bot.send_chat_action(message.chat.id, 'typing')
    user_input = message.text.strip()

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": LEHA_PROMPT},
                {"role": "user", "content": user_input}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        reply_text = response.choices[0].message["content"].strip()
        bot.reply_to(message, reply_text)

    except Exception as e:
        bot.reply_to(message, f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ: {e}")

# üìå –ö–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å
def should_respond(message):
    if message.text is None:
        return False
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id:
        return True
    if "–ª—ë—Ö–∞" in message.text.lower():
        return True
    return False

# üß† –¢–æ–∫–µ–Ω-–æ—Ç—á—ë—Ç —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
def daily_token_report():
    while True:
        try:
            usage = openai.api_usage()
            total_used = usage["daily"]["usage"][-1]["n_tokens_total"]
            bot.send_message(OWNER_ID, f"üìä –õ—ë—Ö–∏–Ω –æ—Ç—á—ë—Ç: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {total_used:,} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            if total_used >= 240_000:
                bot.send_message(OWNER_ID, f"üö® –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ü–æ—á—Ç–∏ —Å–æ–∂—Ä–∞–ª–∏ –ª–∏–º–∏—Ç –≤ 250,000 —Ç–æ–∫–µ–Ω–æ–≤.")
        except Exception as e:
            bot.send_message(OWNER_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        time.sleep(86400)

# üõ∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return '', 200

@app.before_first_request
def setup():
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=daily_token_report, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
